POST
/exchange/update

updateExchanges(Exchange[]);

[
    {
        "abbreviation": "test-50",
        "bookNumber": "06",
        "createdTs": "2022-10-07T22:18:37.000Z",
        "createdUserId": "DATA_SETUP",
        "fullName": "ZEBALLOS",
        "lastUpdatedTs": "2022-10-07T22:18:37.000Z",
        "lastUpdatedUserId": "DATA_SETUP",
        "secondAbbreviation": null,
        "sectionNumber": "20",
        "npa": [
            {
                "npa": "238",
                "id": 1909
            }
        ]
    }
]
=======================================================
    /**
     * Updates a <code>List<Exchange></code>
     * 
     * @param <code>List<Exchange></code>
     * @return <code>true</code> if all the updates were successful. <code>false</code> otherwise
     */
    public boolean updateExchanges(List<Exchange> exchanges)
    {
        try
        {
            LOGGER.debug( "Entering updateExchanges method" );
            for ( Exchange exchange : exchanges ) //DONE
            {
                exchangeMapper.updateExchange( exchange );
                
                List<NpaExchange> npaList =  npaExchangeMapper.getByExchange(exchange);

                // move to method deleteNpaByAbbrev
                // add comment why
            
                if (StringUtils.isEmpty(exchange.getNpa())) {
                	if (null != npaList && npaList.size() > 0) {
                		npaExchangeMapper.deleteByAbbrev(exchange);
                	}
                } else {
                	String[] npas = StringUtils.deleteWhitespace(exchange.getNpa()).split(",");
                	// ADD new NPAs
                	for(String npa: npas) {
                		boolean exists = false;
                		if (null != npaList && npaList.size() > 0) {
                    		for (NpaExchange npaExchange : npaList) {
                                    // you shouldn't update the current NPA because actually nothing changed
                                    // all three main columns (id, npa, abbrev) are the same
								if (npa.equalsIgnoreCase(npaExchange.getNpa())) {
									exists = true;
									break;
								}
							}
                    	}
                		if (!exists && npaExchangeMapper.npaExists(npa) > 0) {
                			NpaExchange npaExchange = new NpaExchange();
                			npaExchange.setNpa(npa);
                			npaExchange.setExchAbbrev(exchange.getAbbrev());
                			npaExchange.setCreatedUserId(exchange.getLastUpdatedUserId());
                			npaExchange.setLastUpdatedUserId(exchange.getLastUpdatedUserId());
                			npaExchangeMapper.insert(npaExchange);
                			LOGGER.debug("Added new NPA: " + npaExchange);
                		}
                	}
                	// DELETE missing NPAs
                    // move to function deteteMissingNpa
                    // add comment for what
                    if (npaList != null) {
                        for ( NpaExchange npaExchange : npaList ) {
                            boolean exists = false;
                            for (String npa : npas){
                                if (npa.equalsIgnoreCase(npaExchange.getNpa())){
                                    exists = true;
                                }
                            }
                            if ( !exists )
                            {
                                npaExchangeMapper.deleteByNpaExchange( npaExchange );
                            }
                        }
                    }
                }
                
            }
        }
        catch ( Exception e )
        {
        	e.printStackTrace();
            String errMsg = "Error with updating exchanges";
            LOGGER.error( errMsg, e );
            return false;
        }
        
        return true;
    }